{"version":3,"sources":["modules/blockNFT.js","modules/ignore.js","modules/request.js","modules/requestAddress.js","telas/Main.js","telas/ShowNFT.js","App.js","reportWebVitals.js","index.js"],"names":["BlockNFT","props","objeto","className","onClick","window","location","href","TXID","isImage","style","backgroundImage","Content","hasDescription","description","ignoreNFT","requestBlock","txID","a","includes","undefined","requestJsonBlock","block","verifyIfHasDescription","hexFirstData_to_ascii","getDescription","verifyIsImage","firstDataToAscii","hex_to_ascii","hexToBase64","primaryContent","url","axios","get","data","console","log","str1","hex","toString","str","n","length","String","fromCharCode","parseInt","substr","split","content","valor","counter","hexSingle","hexstring","btoa","match","map","join","renders","mostraRender","setRender","setRenders","requestAddressBlock","addressBlock","i","object","push","requestAddressJSONBlock","trataAddressJson","address","fetch","res","json","txIDS","tx_hash","Main","useState","inputNFT","setInputNFT","useEffect","getRender","type","placeholder","onChange","evento","target","value","item","ShowNFT","NFT","setNFT","search","replace","getTXID","Token","TX1","ADD","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2ea8369.chunk.js","sourcesContent":["import \"../css/blockNFT.css\"\r\n\r\nexport default function BlockNFT(props){\r\n\r\n    const objeto = props.objeto\r\n    \r\n    return(\r\n        <div className=\"blockBackground\" onClick={()=>{window.location.href=`/showNFT?${objeto.TXID}`}}>\r\n            {\r\n                (objeto.isImage)\r\n                ?\r\n                <div className=\"blockTop\" style={{backgroundImage:`url(${objeto.Content})`}}></div>\r\n                :\r\n                <div className=\"blockTop\">{objeto.Content}</div>\r\n            }\r\n            <div className=\"blockBottom\">\r\n                <h1>Main ID:</h1>\r\n                <h1>{objeto.TXID}</h1>\r\n                <p>Descrição</p>\r\n                {\r\n                    (objeto.hasDescription)\r\n                    ?\r\n                    <p>{objeto.description}</p>\r\n                    :\r\n                    <p>Sem Descrição dada pelo autor no momento da criação</p>\r\n                }\r\n                 \r\n            </div>\r\n        </div>\r\n    )\r\n}","export const ignoreNFT = [\"afe6443a9d9b045074e4b3f27b3307f6f3a9d264b43a4c44f15f2c4492420415\"]","import axios from \"axios\"\r\nimport {ignoreNFT} from \"./ignore\"\r\n\r\n\r\nexport default async function requestBlock(txID){\r\n\r\n    //Ids Ignorados\r\n    \r\n    if(ignoreNFT.includes(txID)){\r\n        return undefined\r\n    }\r\n\r\n    try {\r\n        let block = await requestJsonBlock(txID);\r\n    block = hexFirstData_to_ascii(block);\r\n    block = verifyIfHasDescription(block)\r\n\r\n    if(block.hasDescription){\r\n        block = getDescription(block)\r\n    }\r\n\r\n    block = verifyIsImage(block);\r\n\r\n    if(block.isImage){\r\n        if(block.hasDescription){\r\n            return {\r\n                \"isImage\": true,\r\n                \"Token\":block.firstDataToAscii[1],\r\n                \"hasDescription\": true,\r\n                \"description\":hex_to_ascii(block.description),\r\n                \"TX1\":block.firstDataToAscii[2],\r\n                \"ADD\":block.firstDataToAscii[3],\r\n                \"Content\":`data:image/png;base64,${hexToBase64(block.primaryContent)}`,\r\n                \"TXID\":txID,\r\n                \"WhatsOnChainLink\":`https://whatsonchain.com/tx/${txID}`\r\n            }\r\n        }else{\r\n            return {\r\n                \"isImage\": true,\r\n                \"Token\":block.firstDataToAscii[1],\r\n                \"hasDescription\": false,\r\n                \"TX1\":block.firstDataToAscii[2],\r\n                \"ADD\":block.firstDataToAscii[3],\r\n                \"Content\":`data:image/png;base64,${hexToBase64(block.primaryContent)}`,\r\n                \"TXID\":txID,\r\n                \"WhatsOnChainLink\":`https://whatsonchain.com/tx/${txID}`\r\n            }\r\n        }\r\n        \r\n    }else{\r\n        if(block.hasDescription){\r\n            return {\r\n                \"isImage\": false,\r\n                \"Token\":block.firstDataToAscii[1],\r\n                \"hasDescription\": true,\r\n                \"description\":hex_to_ascii(block.description),\r\n                \"TX1\":block.firstDataToAscii[2],\r\n                \"ADD\":block.firstDataToAscii[3],\r\n                \"Content\":hex_to_ascii(block.primaryContent),\r\n                \"TXID\":txID,\r\n                \"WhatsOnChainLink\":`https://whatsonchain.com/tx/${txID}`\r\n            }\r\n        }else{\r\n            return {\r\n                \"isImage\": false,\r\n                \"Token\":block.firstDataToAscii[1],\r\n                \"hasDescription\": false,\r\n                \"TX1\":block.firstDataToAscii[2],\r\n                \"ADD\":block.firstDataToAscii[3],\r\n                \"Content\":hex_to_ascii(block.primaryContent),\r\n                \"TXID\":txID,\r\n                \"WhatsOnChainLink\":`https://whatsonchain.com/tx/${txID}`\r\n            }\r\n        }\r\n    }\r\n    } catch (error) {\r\n        \r\n    }\r\n\r\n}\r\n\r\nasync function requestJsonBlock(txID){\r\n\r\n\r\n    let url = `https://api.whatsonchain.com/v1/bsv/main/tx/${txID}/out/0/hex`\r\n\r\n    try{\r\n        return await(await axios.get(url)).data\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n\r\n} \r\n\r\nfunction hexFirstData_to_ascii(str1){\r\n    var hex  = str1.toString();\r\n    var str = '';\r\n    for (var n = 0; n < hex.length; n += 2) {\r\n        if(String.fromCharCode(parseInt(hex.substr(n, 2), 16)) === \"&\"){\r\n            return {\r\n                firstDataToAscii:str.split(\"\\n\"),\r\n                primaryContent: hex.substr(n+2)}\r\n        }\r\n        str+= String.fromCharCode(parseInt(hex.substr(n, 2), 16))\r\n    }\r\n}\r\n\r\nfunction verifyIfHasDescription(block){\r\n    let hex = block.primaryContent.toString()\r\n    \r\n    if(hex.substr(0,2) == 26){\r\n        return {\r\n            hasDescription: true,\r\n            firstDataToAscii: block.firstDataToAscii,\r\n            primaryContent: block.primaryContent\r\n        }\r\n    }else{\r\n        return {\r\n            hasDescription: false,\r\n            firstDataToAscii: block.firstDataToAscii,\r\n            primaryContent: block.primaryContent\r\n        }\r\n    }\r\n}\r\n\r\nfunction getDescription(block){\r\n    let hex = block.primaryContent\r\n    var description = \"\"\r\n    var content = \"\"\r\n\r\n    for(let n = 2; true; n+=2){\r\n        let valor = hex.substr(n,2)\r\n\r\n        if(valor != 26){\r\n            description+=valor\r\n        }else{\r\n            content += hex.substr(n+2)\r\n            break\r\n        }\r\n    }\r\n\r\n    return {\r\n        hasDescription: true,\r\n        description: description,\r\n        firstDataToAscii: block.firstDataToAscii,\r\n        primaryContent: content\r\n    }\r\n}\r\n\r\nfunction verifyIsImage(block){\r\n    let hex = block.primaryContent.toString()\r\n    let counter = 0\r\n\r\n    for (let n = 0; n < 300; n+=2) {\r\n        let hexSingle = parseInt(hex.substr(n, 2), 16)\r\n\r\n        if(counter === 20){\r\n            \r\n            if(block.hasDescription){\r\n                return {\r\n                    isImage:true,\r\n                    hasDescription: true,\r\n                    description: block.description,\r\n                    firstDataToAscii: block.firstDataToAscii,\r\n                    primaryContent: block.primaryContent\r\n                }\r\n            }else{\r\n                return {\r\n                    isImage:true,\r\n                    hasDescription: false,\r\n                    firstDataToAscii: block.firstDataToAscii,\r\n                    primaryContent: block.primaryContent\r\n                }\r\n            }\r\n            \r\n            \r\n        } \r\n\r\n        \r\n        if((hexSingle > 1 && hexSingle < 31) || (hexSingle > 128 && hexSingle < 255)){\r\n            counter++\r\n        }\r\n    }\r\n\r\n    if(block.hasDescription){\r\n        return {\r\n            isImage:false,\r\n            hasDescription: true,\r\n            description: block.description,\r\n            firstDataToAscii: block.firstDataToAscii,\r\n            primaryContent: block.primaryContent\r\n        }\r\n    }else{\r\n        return {\r\n            isImage:false,\r\n            hasDescription: false,\r\n            firstDataToAscii: block.firstDataToAscii,\r\n            primaryContent: block.primaryContent\r\n        }\r\n    }\r\n}\r\n\r\nfunction hex_to_ascii(str1){\r\n    var hex  = str1.toString();\r\n    var str = '';\r\n    for (var n = 0; n < hex.length; n += 2) {\r\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\r\n    }\r\n    return str;\r\n}\r\n\r\nfunction hexToBase64(hexstring) {\r\n    return btoa(hexstring.match(/\\w{2}/g).map(function(a) {\r\n        return String.fromCharCode(parseInt(a, 16));\r\n    }).join(\"\"));\r\n} ","import BlockNFT from \"./blockNFT\"\r\nimport requestBlock from \"./request\"\r\n\r\nexport var renders = []\r\n\r\nfunction mostraRender(setRender){\r\n    setRender([...renders])\r\n}\r\n\r\n\r\nexport async function getRender(setRenders){\r\n\r\n    var addressBlock\r\n    try {\r\n        addressBlock = await requestAddressBlock()\r\n    } catch (error) {   \r\n    }\r\n\r\n    console.log(addressBlock)\r\n\r\n    var i = 0\r\n\r\n    while(i < addressBlock.length){\r\n        let object = await requestBlock(addressBlock[i])\r\n\r\n        if(typeof object != \"undefined\"){\r\n            object = <BlockNFT objeto={object}></BlockNFT>\r\n        }\r\n\r\n        if(!renders.includes(object) && typeof object != \"undefined\"){\r\n            renders.push(object)\r\n        }\r\n\r\n        mostraRender(setRenders)\r\n        i++\r\n\r\n    }\r\n }\r\n\r\n\r\n\r\n\r\nasync function requestAddressBlock(){\r\n    const address = \"1GHz8oqDXRRSBiXfWxkmB3fzCFvLaCbAMF\"\r\n    let addressBlock = await requestAddressJSONBlock(address)\r\n    \r\n    addressBlock = trataAddressJson(addressBlock)\r\n    \r\n    return addressBlock\r\n\r\n}\r\n\r\nasync function requestAddressJSONBlock(address){\r\n\r\n    let url = `https://api.whatsonchain.com/v1/bsv/main/address/${address}/history`\r\n    try {\r\n        let res = await fetch(url);\r\n        return await res.json()\r\n    } catch (error) {\r\n        \r\n    } \r\n}\r\n\r\nfunction trataAddressJson(addressBlock){\r\n    let txIDS = []\r\n\r\n    addressBlock.map((address)=>{\r\n        txIDS.push(address.tx_hash)\r\n    })\r\n\r\n    return txIDS\r\n}\r\n\r\n","import \"../css/header.css\"\r\nimport \"../css/main.css\"\r\nimport {getRender} from \"../modules/requestAddress\"\r\nimport BlockNFT from \"../modules/blockNFT.js\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function Main(){\r\n\r\n    const [renders, setRenders] = useState([])\r\n    const [inputNFT, setInputNFT] = useState(\"\")\r\n    \r\n    useEffect(()=>{\r\n        getRender(setRenders)\r\n    },[])\r\n\r\n    \r\n    return(\r\n        <div>\r\n            <header>\r\n                <h1>NFTSpace</h1>\r\n                <div>\r\n                    <input type=\"text\" \r\n                    placeholder=\"Digite seu NFT\"\r\n                    onChange={evento=>setInputNFT(evento.target.value)}>\r\n                    </input>\r\n                    <a className=\"material-icons a\" href={`/showNFT?${inputNFT}`}>search</a>\r\n                </div>\r\n            </header>\r\n            <div className=\"areaDeNFTS\">\r\n                {\r\n                    renders.map(item=>{\r\n                        return item\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )    \r\n}","import \"../css/header.css\"\r\nimport \"../css/ShowNFT.css\"\r\nimport requestBlock from \"../modules/request\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport default function ShowNFT(){\r\n\r\n    const [NFT, setNFT] = useState({})\r\n    const [inputNFT, setInputNFT] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n        let txID = window.location.search.replace(\"?\",\"\")\r\n        console.log(txID)\r\n        async function getTXID(){\r\n            try {\r\n                let block = await requestBlock(txID)\r\n                if(typeof block == \"undefined\"){\r\n                    window.location.href = \"/\"\r\n                }\r\n\r\n                setNFT(block)\r\n            } catch (error) {\r\n            }\r\n        }\r\n        getTXID()\r\n    },[])\r\n\r\n\r\n    return(\r\n        <div>\r\n            <header>\r\n                <h1>NFTSpace</h1>\r\n                <div>\r\n                    <input type=\"text\" \r\n                    placeholder=\"Digite seu NFT\"\r\n                    onChange={evento=>setInputNFT(evento.target.value)}>\r\n                    </input>\r\n                    <a className=\"material-icons a\" href={`/showNFT?${inputNFT}`}>search</a>\r\n                </div>\r\n            </header>\r\n\r\n\r\n            <div className=\"showArea\">\r\n                <div className=\"contentArea\">\r\n                    {\r\n                        (NFT.isImage)\r\n                        ?\r\n                        <div className=\"contentArea-Image\" style={{backgroundImage:`url(${NFT.Content})`}}></div>\r\n                        :\r\n                        <h1>{NFT.Content}</h1>\r\n                    }\r\n                </div>\r\n                <div className=\"DescriptionArea\">\r\n                    <h1>{NFT.description}</h1>\r\n                </div>\r\n                <footer>\r\n                    <h1>Token: {NFT.Token}</h1>\r\n                    <h1>TX1: {NFT.TX1}</h1>\r\n                    <h1>ADD: {NFT.ADD}</h1>\r\n                </footer>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )    \r\n}\r\n","import { useState } from \"react\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport Main from \"./telas/Main\";\nimport ShowNFT from \"./telas/ShowNFT\"\n\nexport default function App() {\n\n    return(\n      <BrowserRouter>\n          <Switch>\n            <Route path=\"/\" exact={true} component={Main}></Route>\n            <Route path=\"/showNFT\" component={ShowNFT}></Route>\n          </Switch>\n      </BrowserRouter>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}